{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import absolute_import, division, print_function # , unicode_literals\n",
    "\n",
    "import logging\n",
    "import re\n",
    "from collections import namedtuple\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "from matplotlib import pyplot as plt\n",
    "# %matplotlib inline\n",
    "from os import getcwd, path\n",
    "\n",
    "from madminer.core import MadMiner\n",
    "from madminer.lhe import LHEProcessor\n",
    "from madminer.sampling import combine_and_shuffle\n",
    "from madminer.sampling import SampleAugmenter\n",
    "from madminer.sampling import constant_benchmark_theta, multiple_benchmark_thetas\n",
    "from madminer.ml import MLForge\n",
    "from madminer.plotting import plot_distributions\n",
    "\n",
    "\n",
    "def setup_logging():\n",
    "    # MadMiner output\n",
    "    logging.basicConfig(\n",
    "        format='%(asctime)-5.5s %(name)-20.20s %(levelname)-7.7s %(message)s',\n",
    "        datefmt='%H:%M',\n",
    "        level=logging.DEBUG\n",
    "    )\n",
    "\n",
    "    # Output of all other modules (e.g. matplotlib)\n",
    "    for key in logging.Logger.manager.loggerDict:\n",
    "        if \"madminer\" not in key:\n",
    "            logging.getLogger(key).setLevel(logging.WARNING)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def scrape_n_events(run_card_path):\n",
    "    for line in  open(run_card_path, 'r'):\n",
    "        match = re.match(r'([0-9]+).*n_?events.*', line)\n",
    "        if match:\n",
    "            return int(match.groups()[0])\n",
    "    else:\n",
    "        raise RuntimeError('could not extract n_events/nevents from {0}'.format(run_card_path))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "11:57 root                 INFO    tutorial directory: /home/renegade/codebase/madminer/examples/ttbar\n",
      "11:57 root                 INFO    running madgraph on 200000 events\n",
      "11:57 root                 INFO    running miner...\n",
      "11:57 madminer.core        INFO    Added parameter TOP_MASS (LHA: MASS 6, maximal power in squared ME: (2,), range: (0.0, 1.0))\n",
      "11:57 madminer.core        INFO    Added parameter TOP_WIDTH (LHA: DECAY 6, maximal power in squared ME: (2,), range: (0.0, 1.0))\n",
      "11:57 madminer.core        INFO    Added benchmark 168_15: TOP_WIDTH = 1.50, TOP_MASS = 1.68e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 169_15: TOP_WIDTH = 1.50, TOP_MASS = 1.69e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 170_15: TOP_WIDTH = 1.50, TOP_MASS = 1.70e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 171_15: TOP_WIDTH = 1.50, TOP_MASS = 1.71e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 172_15: TOP_WIDTH = 1.50, TOP_MASS = 1.72e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 173_15: TOP_WIDTH = 1.50, TOP_MASS = 1.73e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 174_15: TOP_WIDTH = 1.50, TOP_MASS = 1.74e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 175_15: TOP_WIDTH = 1.50, TOP_MASS = 1.75e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 176_15: TOP_WIDTH = 1.50, TOP_MASS = 1.76e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 177_15: TOP_WIDTH = 1.50, TOP_MASS = 1.77e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 178_15: TOP_WIDTH = 1.50, TOP_MASS = 1.78e+02)\n",
      "11:57 madminer.core        INFO    Added benchmark 173_70: TOP_WIDTH = 7.00, TOP_MASS = 1.73e+02)\n",
      "11:57 madminer.core        INFO    Saving setup (without morphing) to /home/renegade/codebase/madminer/examples/ttbar/data/madminer_example_mvm.h5\n",
      "11:57 madminer.utils.inter INFO    Generating MadGraph process folder from /home/renegade/codebase/madminer/examples/ttbar/cards/ttbar_proc_card.dat at /home/renegade/codebase/madminer/examples/ttbar/mg_processes/signal\n",
      "11:57 madminer.core        INFO    Run 0\n",
      "11:57 madminer.core        INFO      Sampling from benchmark: 173_70\n",
      "11:57 madminer.core        INFO      Original run card:       /home/renegade/codebase/madminer/examples/ttbar/cards/ttbar_run_card.dat\n",
      "11:57 madminer.core        INFO      Original Pythia8 card:   None\n",
      "11:57 madminer.core        INFO      Copied run card:         /madminer/cards/run_card_0.dat\n",
      "11:57 madminer.core        INFO      Copied Pythia8 card:     None\n",
      "11:57 madminer.core        INFO      Param card:              /madminer/cards/param_card_0.dat\n",
      "11:57 madminer.core        INFO      Reweight card:           /madminer/cards/reweight_card_0.dat\n",
      "11:57 madminer.core        INFO      Log file:                run_0.log\n",
      "11:57 madminer.core        INFO    Creating param and reweight cards in /home/renegade/codebase/madminer/examples/ttbar/mg_processes/signal//madminer/cards/param_card_0.dat, /home/renegade/codebase/madminer/examples/ttbar/mg_processes/signal//madminer/cards/reweight_card_0.dat\n",
      "11:57 madminer.utils.inter INFO    Starting MadGraph and Pythia in /home/renegade/codebase/madminer/examples/ttbar/mg_processes/signal\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "setup_logging()\n",
    "\n",
    "tutorial_dir = getcwd()\n",
    "logging.info('tutorial directory: {0}'.format(tutorial_dir))\n",
    "mg_dir = str('/home/renegade/util/MG5_aMC_v2_6_4')\n",
    "miner_h5_path = path.join(tutorial_dir,  'data/madminer_example_mvm.h5')\n",
    "miner_h5_path_with_data = miner_h5_path.replace('.h5', '_with_data.h5')\n",
    "miner_h5_path_shuffled = miner_h5_path.replace('.h5', '_shuffled.h5')\n",
    "run_card = path.join(tutorial_dir, 'cards/ttbar_run_card.dat')\n",
    "\n",
    "rerun_madgraph = True\n",
    "rerun_lheprocessor = False\n",
    "rerun_sample_augmenter = False\n",
    "rerun_forge = False\n",
    "\n",
    "n_events = scrape_n_events(run_card)\n",
    "logging.info('running madgraph on {0} events'.format(n_events))\n",
    "\n",
    "miner = MadMiner()\n",
    "\n",
    "Benchmark = namedtuple('Benchmark', ['mass', 'width', 'name'])\n",
    "scan_benchmarks = [Benchmark(float(i), 1.5, '{0}_{1}'.format(i, 15)) for i in range(168, 179)]\n",
    "constant_benchmark = Benchmark(173.0, 7.0, '173_70')\n",
    "\n",
    "if rerun_madgraph:\n",
    "    logging.info('running miner...')\n",
    "\n",
    "    miner.add_parameter(\n",
    "        lha_block=str('MASS'),\n",
    "        lha_id=6,\n",
    "        parameter_name=str('TOP_MASS'),\n",
    "    )\n",
    "    miner.add_parameter(\n",
    "        lha_block=str('DECAY'),\n",
    "        lha_id=6,\n",
    "        parameter_name=str('TOP_WIDTH'),\n",
    "    )\n",
    "\n",
    "    # add scanning points\n",
    "    for b in scan_benchmarks + [constant_benchmark]:\n",
    "        miner.add_benchmark({'TOP_MASS': b.mass, 'TOP_WIDTH': b.width}, b.name)\n",
    "    \n",
    "    miner.save(miner_h5_path)\n",
    "    miner.run(\n",
    "        sample_benchmark=constant_benchmark.name,\n",
    "        mg_directory=mg_dir,\n",
    "        mg_process_directory=path.join(tutorial_dir, 'mg_processes/signal'),\n",
    "        proc_card_file=path.join(tutorial_dir, 'cards/ttbar_proc_card.dat'),\n",
    "        param_card_template_file=path.join(tutorial_dir, 'cards/param_card_template.dat'),\n",
    "        run_card_file=run_card,\n",
    "        log_directory=path.join(tutorial_dir, 'logs/signal'),\n",
    "    )\n",
    "else:\n",
    "    logging.info('loading miner results...')\n",
    "    miner.load(miner_h5_path)\n",
    "\n",
    "if rerun_lheprocessor:\n",
    "    logging.info('running LHEProcessor...')\n",
    "    # read madgraph events and smear them and then calculate observables\n",
    "\n",
    "    Particle = namedtuple('Particle', ['name', 'definition'])\n",
    "    particles = [\n",
    "        Particle('e_0', 'e[0]'),\n",
    "        Particle('mu_0', 'mu[0]'),\n",
    "        Particle('j_0', 'j[0]'),\n",
    "        Particle('j_1', 'j[1]'),\n",
    "    ]\n",
    "\n",
    "    proc = LHEProcessor(miner_h5_path)\n",
    "    proc.add_sample(\n",
    "        lhe_filename=path.join(tutorial_dir, 'mg_processes/signal/Events/run_01/unweighted_events.lhe.gz'),\n",
    "        sampled_from_benchmark=constant_benchmark.name,\n",
    "        is_background=False,\n",
    "        k_factor=1.0,\n",
    "    )\n",
    "\n",
    "    proc.set_smearing(\n",
    "        pdgids=[1, 2, 3, 4, 5, 6, 9, 22, -1, -2, -3, -4, -5, -6],  # Partons giving rise to jets\n",
    "        energy_resolution_abs=0.,\n",
    "        energy_resolution_rel=0.1,\n",
    "        pt_resolution_abs=None,\n",
    "        pt_resolution_rel=None,\n",
    "        eta_resolution_abs=0,\n",
    "        eta_resolution_rel=0,\n",
    "        phi_resolution_abs=0,\n",
    "        phi_resolution_rel=0,\n",
    "    )\n",
    "\n",
    "    proc.set_smearing(\n",
    "        pdgids=[11, 13, -11, -13],\n",
    "        # electron and muon smearing is minimal since semiconductor based detection is so excellent\n",
    "        energy_resolution_abs=0.,\n",
    "        energy_resolution_rel=0.05,\n",
    "        pt_resolution_abs=None,\n",
    "        pt_resolution_rel=None,\n",
    "        eta_resolution_abs=0,\n",
    "        eta_resolution_rel=0,\n",
    "        phi_resolution_abs=0,\n",
    "        phi_resolution_rel=0,\n",
    "    )\n",
    "\n",
    "    for p in particles:\n",
    "        proc.add_observable(\n",
    "            str('{0}_energy'.format(p.name)),\n",
    "            str('{0}.e'.format(p.definition)),\n",
    "            required=True\n",
    "        )\n",
    "\n",
    "        proc.add_observable(\n",
    "            str('{0}_momentum'.format(p.name)),\n",
    "            str('{0}.pt'.format(p.definition)),\n",
    "            required=True\n",
    "        )\n",
    "\n",
    "        # angle in plane perpendicular to collision\n",
    "        proc.add_observable(\n",
    "            str('{0}_eta'.format(p.name)),\n",
    "            str('{0}.eta'.format(p.definition)),\n",
    "            required=True\n",
    "        )\n",
    "\n",
    "        # angle from collision line to transverse plane, 0 - inf. 0 is perpendicular and inf is parallel\n",
    "        proc.add_observable(\n",
    "            str('{0}_phi'.format(p.name)),\n",
    "            str('{0}.phi()'.format(p.definition)),\n",
    "            required=True\n",
    "        )\n",
    "\n",
    "    proc.add_observable(\n",
    "        str('missing_energy_momentum'),\n",
    "        str('met.pt'),\n",
    "        required=True\n",
    "    )\n",
    "\n",
    "    proc.analyse_samples()\n",
    "    proc.save(miner_h5_path_with_data)\n",
    "\n",
    "    logging.info(proc.observables)\n",
    "    logging.info(proc.observations.keys())\n",
    "\n",
    "else:\n",
    "    logging.info('skipping LHEProcessor...')\n",
    "\n",
    "_ = plot_distributions(\n",
    "    filename=miner_h5_path_with_data,\n",
    "    uncertainties='none',\n",
    "    n_bins=20,\n",
    "    n_cols=2,\n",
    "    normalize=True,\n",
    ")\n",
    "\n",
    "if rerun_sample_augmenter:\n",
    "    logging.info('running SampleAugmenter...')\n",
    "    combine_and_shuffle([miner_h5_path_with_data], miner_h5_path_shuffled)\n",
    "    sa = SampleAugmenter(miner_h5_path_shuffled)\n",
    "    x, theta0, theta1, y, r_xz, t_xz = sa.extract_samples_train_ratio(\n",
    "        theta0=multiple_benchmark_thetas([b.name for b in scan_benchmarks]),\n",
    "        theta1=constant_benchmark_theta(constant_benchmark.name),\n",
    "        n_samples=n_events*10,\n",
    "        folder=path.join(tutorial_dir, 'data/samples'),\n",
    "        filename='train'\n",
    "    )\n",
    "\n",
    "    _0 = sa.extract_samples_test(\n",
    "        theta=constant_benchmark_theta(constant_benchmark.name),\n",
    "        n_samples=n_events*10,\n",
    "        folder=path.join(tutorial_dir, 'data/samples'),\n",
    "        filename='test'\n",
    "    )\n",
    "\n",
    "    thetas_benchmarks, xsecs_benchmarks, xsec_errors_benchmarks = sa.extract_cross_sections(\n",
    "        theta=multiple_benchmark_thetas([b.name for b in scan_benchmarks])\n",
    "    )\n",
    "\n",
    "    logging.info(str(xsecs_benchmarks))\n",
    "\n",
    "    fig = plt.figure(figsize=(5, 4))\n",
    "    sc = plt.scatter(thetas_benchmarks[:, 0], thetas_benchmarks[:, 1], c=xsecs_benchmarks,\n",
    "                     s=200., cmap='viridis', vmin=0., lw=2., edgecolor='black', marker='s')\n",
    "\n",
    "    cb = plt.colorbar(sc)\n",
    "    plt.show()\n",
    "else:\n",
    "    logging.info('skipping SampleAugmenter...')\n",
    "\n",
    "mass_bins = np.linspace(165.0, 180.0, 21)\n",
    "width_bins = np.array([7.0, ]) # np.linspace(1.0, constant_benchmark.width + 0.5, 21)\n",
    "mass, width = np.meshgrid(mass_bins, width_bins)\n",
    "mass_width_grid = np.vstack((mass.flatten(), width.flatten())).T\n",
    "theta_ref = np.array([[constant_benchmark.mass, constant_benchmark.width]])\n",
    "\n",
    "if rerun_forge:\n",
    "    logging.info('running forge')\n",
    "    forge = MLForge()\n",
    "    training_results = forge.train(method='alice',\n",
    "                                   theta0_filename=path.join(tutorial_dir, 'data/samples/theta0_train.npy'),\n",
    "                                   x_filename=path.join(tutorial_dir, 'data/samples/x_train.npy'),\n",
    "                                   y_filename=path.join(tutorial_dir, 'data/samples/y_train.npy'),\n",
    "                                   r_xz_filename=path.join(tutorial_dir, 'data/samples/r_xz_train.npy'),\n",
    "                                   n_hidden=(20, 20),\n",
    "                                   n_epochs=20,\n",
    "                                   validation_split=0.3,\n",
    "                                   batch_size=256,\n",
    "                                   )\n",
    "\n",
    "    np.save(path.join(tutorial_dir, 'data/samples/mass_width_grid.npy'), mass_width_grid)\n",
    "    np.save(path.join(tutorial_dir, 'data/samples/theta_ref.npy'), theta_ref)\n",
    "\n",
    "    forge.load(path.join(tutorial_dir, 'models/alice'))\n",
    "    log_r_hat, _, _ = forge.evaluate(\n",
    "        theta0_filename=path.join(tutorial_dir, 'data/samples/mass_width_grid.npy'),\n",
    "        x=path.join(tutorial_dir, 'data/samples/x_test.npy'),\n",
    "        evaluate_score=False\n",
    "    )\n",
    "\n",
    "    np.save(path.join(tutorial_dir, 'data/samples/log_r_hat.npy'), log_r_hat)\n",
    "\n",
    "else:\n",
    "    log_r_hat = np.load(path.join(tutorial_dir, 'data/samples/log_r_hat.npy'))\n",
    "    logging.info('skipping forge')\n",
    "\n",
    "\n",
    "# mass_bin_size = mass_bins[1] - mass_bins[0]\n",
    "# width_bin_size = width_bins[1] - width_bins[0]\n",
    "#\n",
    "# mass_edges = np.linspace(mass_bins[0] - mass_bin_size / 2, mass_bins[-1] + mass_bin_size / 2, len(mass_bins) + 1)\n",
    "# width_edges = np.linspace(width_bins[0] - width_bin_size / 2, width_bins[-1] + width_bin_size / 2,\n",
    "#                           len(width_bins) + 1)\n",
    "#\n",
    "# fig = plt.figure(figsize=(6, 5))\n",
    "# ax = plt.gca()\n",
    "#\n",
    "# expected_llr = np.mean(log_r_hat, axis=1)\n",
    "#\n",
    "# best_fit = mass_width_grid[np.argmin(-2. * expected_llr)]\n",
    "#\n",
    "# cmin, cmax = np.min(-2 * expected_llr), np.max(-2 * expected_llr)\n",
    "#\n",
    "# pcm = ax.pcolormesh(mass_edges, width_edges, -2. * expected_llr.reshape((21, 21)),\n",
    "#                     norm=matplotlib.colors.Normalize(vmin=cmin, vmax=cmax),\n",
    "#                     cmap='viridis_r')\n",
    "# cbar = fig.colorbar(pcm, ax=ax, extend='both')\n",
    "#\n",
    "# plt.scatter(best_fit[0], best_fit[1], s=80., color='black', marker='*')\n",
    "#\n",
    "# plt.xlabel(r'mass')\n",
    "# plt.ylabel(r'width')\n",
    "# cbar.set_label(r'$\\mathbb{E}_x [ -2\\, \\log \\,\\hat{r}(x | \\theta, \\theta_{SM}) ]$')\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()\n",
    "\n",
    "# x = mass_width_grid.reshape(21, 21, -1)[10][:, 0]\n",
    "y = -2 * np.mean(log_r_hat.reshape(21, 21, -1)[10], axis=1)\n",
    "fig = plt.figure(figsize=(6, 5))\n",
    "llr_mass = plt.plot(mass_bins, y, marker='o', ls=' ')\n",
    "plt.show()\n",
    "logging.info('')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
